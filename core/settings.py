"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
from decouple import config

BASE_DIR = Path(__file__).resolve(strict=True).parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS').split(',')


# Application definition

INSTALLED_APPS = [
    'modeltranslation',
    'jet.dashboard',
    'jet',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'drf_yasg',
    'rest_framework',
    'rest_framework.authtoken',
    'djoser',
    'django_filters',

    'oauth2_provider',
    'social_django',
    'rest_framework_social_oauth2',

    'account',
    'app',
]

# SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

X_FRAME_OPTIONS = 'SAMEORIGIN'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST'),
        'PORT': config('DB_PORT', cast=int),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'ky'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

gettext = lambda s: s

EXTRA_LANG_INFO = {
    'ug': {
        'bidi': False,
        'code': 'ug',
        'name': 'Uighur',
        'name_local': 'Uygurçi',
    },
    'ba': {
        'bidi': False,
        'code': 'ba',
        'name': 'Bashkir',
        'name_local': 'Bashkir',
    },
    'cv': {
        'bidi': False,
        'code': 'cv',
        'name': 'Chuvash',
        'name_local': 'Chuvash',
    },
    'kaa': {
        'bidi': False,
        'code': 'kaa',
        'name': 'Kara-Kalpak',
        'name_local': 'Kara-Kalpak',
    },
    'krc': {
        'bidi': False,
        'code': 'krc',
        'name': 'Karachay-Balkar',
        'name_local': 'Karachay-Balkar',
    },
    'sah': {
        'bidi': False,
        'code': 'sah',
        'name': 'Yakut',
        'name_local': 'Yakut',
    },
    'alt': {
        'bidi': False,
        'code': 'alt',
        'name': 'Altaic',
        'name_local': 'Altaic',
    },
    'ash': {
        'bidi': False,
        'code': 'ash',
        'name': 'Avshar',
        'name_local': 'Avshar',
    },
    'crh': {
        'bidi': False,
        'code': 'ctt',
        'name': 'Crimean-Tatar',
        'name_local': 'Кырым татар теле',
    },
    'ksk': {
        'bidi': False,
        'code': 'ksk',
        'name': 'Kashkay',
        'name_local': 'Kashkay',
    },
}

import django.conf.locale
LANG_INFO = dict(django.conf.locale.LANG_INFO, **EXTRA_LANG_INFO)
django.conf.locale.LANG_INFO = LANG_INFO


LANGUAGES = (
    # ('ru', gettext('Russian')),
    ('tr', gettext('Turkish')),
    ('az', gettext('Azeri')),
    ('uz', gettext('Uzbek')),
    ('kk', gettext('Kazakh')),
    ('ug', gettext('Uighur')),
    ('tk', gettext('Turkmen')),
    ('tt', gettext('Tatar')),
    ('ky', gettext('Kyrgyz')),
    ('ksk', gettext('Kashkay')),
    ('ba', gettext('Bashkir')),
    ('cv', gettext('Chuvash')),
    ('ash', gettext('Avshar')),
    ('kaa', gettext('Kara-Kalpak')),
    ('krc', gettext('Karachay-Balkar')),
    ('sah', gettext('Yakut')),
    ('crh', gettext('Crimean-Tatar')),
    ('alt', gettext('Altaic')),
)

LANGUAGES_FLAGS = {
    # 'ru': ('Русский','/core/flags/ru.png'),
    'tr': ('Türkçe','/media/flags/tr.jpg'),
    'az': ('Azərbaycan','/media/flags/az.jpg'),
    'uz': ("O'zbek", '/media/flags/uz.jpg'),
    'kk': ('Казакша', '/media/flags/kk.jpg'),
    'ug': ('Uygurçi', '/media/flags/ug.jpg'),
    'tk': ('Türkmen', '/media/flags/tk.jpg'),
    'tt': ('Татар телендә', '/media/flags/tt.jpg'),
    'ky': ('Кыргызча', '/media/flags/ky.jpg'),
    'ksk': (' قاشقای ديلى', '/media/flags/vector.jpg'),
    'ba': ('Башҡорт теле', '/media/flags/ba.jpg'),
    'cv': ('Чӑваш чӗлхи', '/media/flags/cv.jpg'),
    'ash': ('Авшарский', '/media/flags/vector.jpg'),
    'kaa': ('Qaraqalpaq tili', '/media/flags/kaa.jpg'),
    'krc': ('Къарачай-малкъар тил', '/media/flags/krc.jpg'),
    'sah': ('Саха тыла', '/media/flags/sah.jpg'),
    'crh': ('Qırımtatar tili', '/media/flags/crh.jpg'),
    'alt': ('Алтай кыргызский язык', '/media/flags/vector.jpg'),
}



MODELTRANSLATION_DEFAULT_LANGUAGE = 'ky'

MODELTRANSLATION_TRANSLATION_FILES = (
    'app.translation',
)


LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)



STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

AUTH_USER_MODEL = 'account.MyUser'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        # 'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
    ]
}
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

JET_THEMES = [
    {
        'theme': 'default',
        'color': '#47bac1',
        'title': 'Default'
    },
    {
        'theme': 'green',
        'color': '#44b78b',
        'title': 'Green'
    },
    {
        'theme': 'light-green',
        'color': '#2faa60',
        'title': 'Light Green'
    },
    {
        'theme': 'light-violet',
        'color': '#a464c4',
        'title': 'Light Violet'
    },
    {
        'theme': 'light-blue',
        'color': '#5EADDE',
        'title': 'Light Blue'
    },
    {
        'theme': 'light-gray',
        'color': '#222',
        'title': 'Light Gray'
    }
]

# AUTHENTICATION_BACKENDS = [
#     # Needed to login by username in Django admin, regardless of `allauth`
#     'django.contrib.auth.backends.ModelBackend',
#
#     # `allauth` specific authentication methods, such as login by e-mail
#     'allauth.account.auth_backends.AuthenticationBackend',
# ]

# SOCIALACCOUNT_PROVIDERS = {
#     'google': {
#         # For each OAuth based provider, either add a ``SocialApp``
#         # (``socialaccount`` app) containing the required client
#         # credentials, or list them here:
#         'APP': {
#             'client_id': '123',
#             'secret': '456',
#             'key': ''
#         }
#     }
# }


#
# SOCIAL_AUTH_FACEBOOK_KEY = '548199803012414'
# SOCIAL_AUTH_FACEBOOK_SECRET = '108b27e1dd72d39437b80b7c70e7eae7'

TEMPLATE_CONTEXT_PROCESSORS = (
    'social_django.context_processors.backends',
    'social_django.context_processors.login_redirect',
)


SOCIAL_AUTH_GOOGLE_OAUTH_KEY = ''
SOCIAL_AUTH_GOOGLE_OAUTH_SECRET = ''